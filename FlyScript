local plr = game:GetService("Players").LocalPlayer
local char = plr.Character or plr.CharacterAdded:Wait()
local humanoid = char:WaitForChild("Humanoid")
local rootPart = char:WaitForChild("HumanoidRootPart")
local flying = false
local speed = 5
local bodyVelocity, bodyGyro
local connections = {}

-- Function to Switch Character Rig Type Safely
local function switchRigType(rigType)
    if humanoid.RigType ~= rigType then
        local humanoidDescription = humanoid:GetAppliedDescription()
        humanoidDescription.RigType = rigType
        plr:LoadCharacterWithHumanoidDescription(humanoidDescription)
        char = plr.Character
        humanoid = char:WaitForChild("Humanoid")
        rootPart = char:WaitForChild("HumanoidRootPart")
    end
end

-- Anti-Kick & Anti-Detection Bypass
local success, mt = pcall(getrawmetatable, game)
if success and mt then
    setreadonly(mt, false)
    local oldNamecall = mt.__namecall
    mt.__namecall = newcclosure(function(self, ...)
        local method = getnamecallmethod()
        if method == "Kick" or method == "Destroy" then
            return nil
        end
        return oldNamecall(self, ...)
    end)
end

-- UI Setup (Now Smaller and Horizontal)
local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local CloseButton = Instance.new("TextButton")
local IncreaseButton = Instance.new("TextButton")
local DecreaseButton = Instance.new("TextButton")
local SpeedLabel = Instance.new("TextLabel")
local FlyButton = Instance.new("TextButton")
local UnflyButton = Instance.new("TextButton")

ScreenGui.Parent = game.CoreGui

Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
Frame.Position = UDim2.new(0.5, -200, 0.9, -50)
Frame.Size = UDim2.new(0, 400, 0, 50)
Frame.Active = true
Frame.Draggable = true

local function createButton(parent, text, position, color, callback)
    local button = Instance.new("TextButton")
    button.Parent = parent
    button.Size = UDim2.new(0, 60, 0, 40)
    button.Position = position
    button.Text = text
    button.BackgroundColor3 = color
    button.TextColor3 = Color3.new(1, 1, 1)
    button.MouseButton1Click:Connect(callback)
    return button
end

FlyButton = createButton(Frame, "Fly", UDim2.new(0, 10, 0, 5), Color3.fromRGB(0, 200, 0), function()
    switchRigType(Enum.HumanoidRigType.R6)
    fly()
end)

UnflyButton = createButton(Frame, "Unfly", UDim2.new(0, 80, 0, 5), Color3.fromRGB(200, 0, 0), function()
    unfly()
    switchRigType(Enum.HumanoidRigType.R15)
end)

IncreaseButton = createButton(Frame, "+", UDim2.new(0, 150, 0, 5), Color3.fromRGB(0, 150, 255), function()
    speed = speed + 1
    SpeedLabel.Text = "Speed: " .. speed
end)

DecreaseButton = createButton(Frame, "-", UDim2.new(0, 220, 0, 5), Color3.fromRGB(255, 150, 0), function()
    if speed > 1 then
        speed = speed - 1
        SpeedLabel.Text = "Speed: " .. speed
    end
end)

SpeedLabel.Parent = Frame
SpeedLabel.Size = UDim2.new(0, 100, 0, 40)
SpeedLabel.Position = UDim2.new(0, 290, 0, 5)
SpeedLabel.Text = "Speed: 5"
SpeedLabel.TextColor3 = Color3.new(1, 1, 1)
SpeedLabel.BackgroundTransparency = 1

CloseButton = createButton(Frame, "X", UDim2.new(0, 360, 0, 5), Color3.fromRGB(200, 0, 0), function()
    ScreenGui:Destroy()
end)

-- Improved Fly Function with Anti-Patch Methods
function fly()
    if flying then return end
    flying = true
    
    bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    bodyVelocity.Parent = rootPart
    
    bodyGyro = Instance.new("BodyGyro")
    bodyGyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
    bodyGyro.CFrame = rootPart.CFrame
    bodyGyro.Parent = rootPart
    
    local function flightLoop()
        if flying then
            local moveDirection = humanoid.MoveDirection
            local camera = workspace.CurrentCamera
            local lookDirection = camera.CFrame.LookVector
            
            if moveDirection.Magnitude > 0 then
                local flightDirection = (moveDirection * Vector3.new(1, 0, 1) + Vector3.new(0, lookDirection.Y, 0)).Unit
                bodyVelocity.Velocity = flightDirection * speed
                bodyGyro.CFrame = CFrame.new(rootPart.Position, rootPart.Position + flightDirection)
            else
                bodyVelocity.Velocity = Vector3.new(0, 0, 0)
            end
        end
    end
    
    table.insert(connections, game:GetService("RunService").RenderStepped:Connect(flightLoop))
end

-- Improved Unfly Function
function unfly()
    flying = false
    if bodyVelocity then bodyVelocity:Destroy() end
    if bodyGyro then bodyGyro:Destroy() end
    rootPart.Velocity = Vector3.new(0, 0, 0)
    
    for _, conn in pairs(connections) do
        conn:Disconnect()
    end
    connections = {}
end
